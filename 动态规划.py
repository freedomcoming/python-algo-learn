# 动态规划（Dynamic Programming）是一种解决复杂问题的方法，它将问题分解成子问题，并通过解决子问题来解决原始问题。

# 在动态规划中，通常需要遵循以下步骤：

# 1. **定义状态**：明确定义问题的状态，也就是子问题是什么。

# 2. **确定状态转移方程**：找出子问题之间的关联，也就是如何从小的子问题推导出大的问题的解。

# 3. **初始化**：确定初始状态的值，也就是最简单的子问题的解。

# 4. **计算顺序**：确定问题的计算顺序，通常是从最小的子问题开始，逐步推导出大的问题的解。

# 5. **返回结果**：根据子问题的解推导出原始问题的解。

# 以下是一个动态规划的经典示例——斐波那契数列的解法：


def fibonacci(n):
    if n <= 1:
        return n
    
    fib = [0, 1]  # 初始化斐波那契数列的前两个元素
    
    for i in range(2, n+1):
        fib.append(fib[i-1] + fib[i-2])  # 计算斐波那契数列的第i项
        
    return fib[n]

# 示例
result = fibonacci(6)
print(result)  # 输出: 8


# 在这个例子中，我们使用动态规划求解了斐波那契数列的第 n 项。具体步骤如下：

# 1. **定义状态**：我们将第 i 项的斐波那契数记为 f(i)。

# 2. **确定状态转移方程**：根据斐波那契数列的定义，f(i) = f(i-1) + f(i-2)。

# 3. **初始化**：初始化前两项的值为 0 和 1。

# 4. **计算顺序**：从第三项开始，依次计算直到第 n 项。

# 5. **返回结果**：返回第 n 项的值。

# 这就是一个使用动态规划解决斐波那契数列问题的示例。在实际应用中，动态规划可以用来解决许多复杂的问题，包括最短路径、背包问题、最长公共子序列等等。